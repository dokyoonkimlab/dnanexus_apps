#!/bin/bash
# vcf_qc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
DX_RESOURCES_ID='project-BYpFk1Q0pB0xzQY8ZxgJFv1V'

set -x
export SHELL="/bin/bash"

echo $build_version
echo $remove_annotations



dx download "$DX_RESOURCES_ID:/GATK/resources/jre-8u101-linux-x64.tar.gz" -o /usr/share/jre-8u101-linux-x64.tar.gz
tar -zxvf /usr/share/jre-8u101-linux-x64.tar.gz -C /usr/share/

function download_resources() {

	# get the resources we need in /usr/share/GATK
	sudo mkdir -p /usr/share/GATK/resources
	sudo chmod -R a+rwX /usr/share/GATK

		dx download "$DX_RESOURCES_ID:/GATK/jar/GenomeAnalysisTK-3.6.jar" -o /usr/share/GATK/GenomeAnalysisTK.jar
		echo $build_version
	if [ "$build_version" = "b37_decoy" ];
	then
		#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta" -o /usr/share/GATK/resources/build.fasta
		#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta.fai" -o /usr/share/GATK/resources/build.fasta.fai
		#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.dict" -o /usr/share/GATK/resources/build.dict
		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta.fai" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.dict" -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict
	else

			#dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.fa" -o /usr/share/GATK/resources/build.fasta
			#dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.fa.fai" -o /usr/share/GATK/resources/build.fasta.fai
			#dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.dict" -o /usr/share/GATK/resources/build.dict
			dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.fa" -o /usr/share/GATK/resources/h38flat.fasta-index.fasta
			dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.fa.fai" -o /usr/share/GATK/resources/h38flat.fasta-index.fasta.fai
			dx download "$DX_RESOURCES_ID:/GATK/resources/h38flat.fasta-index.tar.gz.genome.dict" -o /usr/share/GATK/resources/h38flat.fasta-index.dict

		fi


}

main() {
	set -x

	echo $build_version


	SUBJOB_ARGS=""

	if test "$EXTRA_CMD"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -iEXTRA_CMD:string='$EXTRA_CMD'"
	fi

	if test "$out_suffix"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -iout_suffix:string='$out_suffix'"
	fi

	SUBJOB_ARGS="$SUBJOB_ARGS -ibuild_version:string=$build_version"

	WKDIR=$(mktemp -d)
	cd $WKDIR

	VCFIDX_LIST=$(mktemp)
	for i in "${!vcfidx_fn[@]}"; do
		dx describe --json "${vcfidx_fn[$i]}" | jq -r '"\(.id)\t\(.name)"' >> $VCFIDX_LIST
	done


	for i in "${!vcf_fn[@]}"; do

		PREFIX="$(dx describe --name "${vcf_fn[$i]}" | sed 's/\.vcf.\(gz\)*$//').subset"

		VCF_NAME=$(dx describe --name "${vcf_fn[$i]}");
		VCF_IDX_LINE=$(grep "\W$VCF_NAME.tbi$" $VCFIDX_LIST | cut -f1)
		# download the tabix index

		NEWPREFIX="$PREFIX"
		SUBJOBID=$(eval dx-jobutil-new-job run_sv -ivcf_fn:file=$(dx describe --json "${vcf_fn[$i]}" | jq -r .id) -ivcfidx_fn:file=$VCF_IDX_LINE -iPREFIX:string="$NEWPREFIX" "$SUBJOB_ARGS")

		dx-jobutil-add-output vcf_out --array "$SUBJOBID:vcf_out" --class=jobref
		dx-jobutil-add-output vcfidx_out --array "$SUBJOBID:vcfidx_out" --class=jobref
    done

}


run_sv() {

	set -x

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	WKDIR=$(mktemp -d)
	cd $WKDIR

	SV_ARGS=""

	if test "$EXTRA_CMD"; then
		SV_ARGS="$SV_ARGS $EXTRA_CMD"
	fi

	download_resources

	# get the resources we need in /usr/share/GATK
	#sudo mkdir -p /usr/share/GATK/resources
	#sudo chmod -R a+rwX /usr/share/GATK


	#dx download "$DX_RESOURCES_ID:/GATK/jar/GenomeAnalysisTK-3.4-46.jar" -o /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar
	#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
	#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta.fai" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
	#dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.dict" -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict



    TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
    # only ask for 90% of total system memory
    TOT_MEM=$((TOT_MEM * 9 / 10))

	# chmod +rwX /usr/bin/download_part.py
	# download_part.py -f $(dx describe --json "$vcf_fn" | jq -r .id) -i $(dx describe --json "$vcfidx_fn" | jq -r .id) -L $CHR -H -o raw.vcf.gz
	dx download $(dx describe --json "$vcf_fn" | jq -r .id) -o raw.vcf.gz
	dx download $(dx describe --json "$vcfidx_fn" | jq -r .id) -o raw.vcf.gz.tbi


 #   dx download "$vcf_fn" -o raw.vcf.gz
 #   dx download "$vcfidx_fn" -o raw.vcf.gz.tbi


	OUT_DIR=$(mktemp -d)
	if test -z "$PREFIX"; then
		PREFIX="$(dx describe --name "$vcf_fn" | sed 's/\.vcf.\(gz\)*$//').subset"
	fi

	if test "$out_suffix"; then
		SUFFIX="${out_suffix}."
	fi

	if [ "$build_version" = "b37_decoy" ];
	then
		eval /usr/share/jre1.8.0_101/bin/java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK.jar \
			-T LeftAlignAndTrimVariants \
			-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
			--variant raw.vcf.gz \
			-o $OUT_DIR/$PREFIX."$SUFFIX"vcf.gz --splitMultiallelics --dontTrimAlleles
	else
		eval /usr/share/jre1.8.0_101/bin/java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK.jar \
			-T LeftAlignAndTrimVariants \
			-R /usr/share/GATK/resources/h38flat.fasta-index.fasta \
			--variant raw.vcf.gz \
			-o $OUT_DIR/$PREFIX."$SUFFIX"vcf.gz --splitMultiallelics --dontTrimAlleles
	fi

	vcf_out=$(dx upload $OUT_DIR/$PREFIX.${SUFFIX}vcf.gz --brief)
	vcfidx_out=$(dx upload $OUT_DIR/$PREFIX.${SUFFIX}vcf.gz.tbi --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file
}
